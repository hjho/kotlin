인프런 최광성님의 "Kotlin부터 Spring Security 까지"
  - https://www.inflearn.com/course/코틀린-스프링-시큐리티
  - 3시간 30분 정도의 강의

00. 프로그래밍을 배우는 방법.
  - 아는 것 | 모르는 것
  - 처음에는 아는 것과 모르는 것을 구분 못함.(뭐를 모르는지 모름,,,)
    > 강의를 처음부터 끝까지 본다.
    > 강의를 보지 않고 강의에서 제작한 프로젝트를 따라 만들어 본다.
    > 잘 모르는 부분은 강의를 보고 다시 만들어 본다.
  - 위 방식으로 공부하면 모르는 것 보다 아는게 많아진다~~

data class Text (
  var text: String = "Hello world!!"
)

01. NullSafe
  - 객체가 Null일 가능성이 있으면 "?"기호를 이용하여 호출하지 않음.
  - 코드를 많이 사용 안해도 된다.
  - message?.text
  - message?.let { "Message: ${it.text}"; }
    > message가 null이 아니면(?) let을 호출해라! ( it 내장객체 )

02. Type 지정방식(var, val)
  - var message: Text? = null   // "?" null 가능
  - var message: Text = Text() // null 안됨.
  - var는 추후 변경O, val은 변경X
  - val m = 5 으로 작성 된다면, m은 수정 안됨.

03. when
  - when(message) {
      null -> println("Messag is null")
      else -> println("Messag is not null")
    }
  - var m = when(message) {
      null -> 5
      else -> 0
    }

04. if
  - var m = if(message == null) {
      5
    } else {
      0
    }

05. data class Test()
  - java에서 class MMM extends Serialize {  }
  - 데이터 통신에서 해당 class를 객체화 시켜서 전송시킬 수 있다.
  - data class는 Serialize 와 같다.

06. Project 생성.
  가. 한국어: 플러그인 > Korean Language Pack / 한국어 언어 팩 > Install > restart
  나. 단축키: 사용자 지정 > 키맵 > Eclipse > 변경.
  다. sts4에서 demo 프로젝트 생성.
  라. 버전 및 dependencies 설정.
  마. intellij 에서 해당 프로젝트 열기: gragle 로 열기

07. 코틀린 클래스 정의
  - class HtmlController { }

08. 함수 정의
  - fun index(): String = "index"

09. gradle 추가
  - https://www.baeldung.com/spring-boot-h2-database
    > spring-boot-starter-data-jpa
      > 영속성(persistence)은 데이터를 생성한 프로그램의 실행이 종료되더라도 사라지지 않는 데이터의 특성을 의미한다.
      > java persistence API
      > java 객체를 영속적으로 저장할 수 있는 API
    > h2
      > hibernate 가 제일 유명.
  - 데이터베이스 추가.
  - build.gradle.kts > dependencies 안에 등록.
  - 코끼리 클릭(?): 없는 라이브러리를 설치함.

10. file base database
  - Google 검색: spring boot h2 jpa file base
  - https://stackoverflow.com/questions/37903105/how-to-configure-spring-boot-to-use-file-based-h2-database
  - http://localhost:8080/h2 접속 > jdbc url 수정
    > spring.h2.console.path 설정에 따름.
  - Test Connect > Connect

11. @Entity
  - 이 class 를 데이터베이스에 저장을 하겠다. 공간을 만들어라.
  - 존재해야하는 속성, id!

12. 하이버네이트 속성 문제.
  - spring.jpa.hibernate.ddl-auto=update 에서 create 로 변경해야 Entity 생성함.
  - User 라는 테이블은 생성이 안됨.

13. late init
  - 지연 초기화. @Autowired 와 사용.

14. spring security gradle 추가.
  - Google 검색,,,
  - org.springframework.boot:spring-boot-starter-security 추가

15. Security
  - ppt 를 지금 만드시네,,,
  - Spring Security 는 자체적으로 시스템을 가지고 있음.
  - 회원정보는 Web Application > UserInfo @Entity 는 Database H2에 있음.
  - Spring Security 의 시스템을 빌려, UserInfo 라는 회원 정보로 인증을 하는 개념.
  - Spring Security
    가) WebSecurityConfiguration
      - @Configurable: 얘가 Configuration 이라고 알려줌.
      - @EnableWebSecurity: Web Security 에 해당하는 Configuration 이라고 알려줌.
      - WebSecurityConfigurerAdapter 상속.
      - override 자동완성으로 확인.
    나) UserCustomService
      - UserDetailsService 상속.
    다) UserInfo
      - UserDetails 상속.

16. 문법.
  - 물음표(?)의 사용: null 이 들어올 수 있는 경우에 붙여줌
  - 느낌표 두개(!!)의 사용: null 이 절대 들어오면 안되는 경우에 붙여줌













